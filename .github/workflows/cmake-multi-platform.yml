# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configuration:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Verify GLFW library exists
      shell: pwsh
      run: |
        $glfwPath = "${{ github.workspace }}/dependencies/ImGUI/examples/libs/glfw/lib-vc2010-64/glfw3.lib"
        if (Test-Path $glfwPath) {
          Write-Host "GLFW library found at: $glfwPath"
        } else {
          Write-Host "ERROR: GLFW library not found at: $glfwPath"
          Write-Host "Available files in GLFW directory:"
          Get-ChildItem "${{ github.workspace }}/dependencies/ImGUI/examples/libs/glfw" -Recurse -Name
          exit 1
        }

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # Skip tests if no test configuration is found
      run: |
        if (Test-Path "CTestTestfile.cmake") {
          ctest --build-config ${{ matrix.build_type }}
        } else {
          Write-Host "No tests configured, skipping test step"
        }
      shell: pwsh

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AeroSLR-Windows-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/AeroSLR.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: AeroSLR-Windows-Release

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: AeroSLR.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
